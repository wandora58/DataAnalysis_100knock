
この章ではロジスティックネットワークの最適設計を行う
最終的に製品を製造する小売店があり、そこで販売される製造群には一定の需要が見込まれており、
それらの需用量に基づいて工場での生産量は決められる

それぞれの製品をどの工場のどのレーン(0,1)で製造するかについては
各工場から小売店への輸送費、製造コストを加味して決められる

このような「ものの流れ」を中心とした「ロジスティックネットワーク」においては
ネットワークの可視化や輸送最適化等の個別最適化だけでなく、
ロジスティックネットワーク全体の最適化が必要となる


まずは輸送最適化
初期設定
  np.random.seed(1)
  nw = len(df_tc.index)
  nf = len(df_tc.columns)
  pr = list(product(range(nw), range(nf)))

数理モデル作成
  m1 = model_min()

  v1 = {(i,j):LpVariable('v%d_%d'%(i,j),lowBound=0) for i,j in pr}
  m1 += lpSum(df_tc.iloc[i][j]*v1[i,j] for i,j in pr)
  for i in range(nw):
      m1 += lpSum(v1[i,j] for j in range(nf)) <= df_supply.iloc[0][i]
  for j in range(nf):
      m1 += lpSum(v1[i,j] for i in range(nw)) >= df_demand.iloc[0][j]
  m1.solve()

総輸送コスト計算
  df_tr_sol = df_tc.copy()
  total_cost = 0
  for k,x in v1.items():
      i,j = k[0],k[1]
      df_tr_sol.iloc[i][j] = value(x)
      total_cost += df_tc.iloc[i][j]*value(x)

print(df_tr_sol)
print("総輸送コスト:"+str(total_cost



次にネットワークの可視化
  import pandas as pd
  import numpy as np
  import matplotlib.pyplot as plt
  import networkx as nx

データ読み込み
  df_tr = df_tr_sol.copy()
  df_pos = pd.read_csv('trans_route_pos.csv')

グラフオブジェクトの作成
  G = nx.Graph()

頂点の設定
  for i in range(len(df_pos.columns)):
      G.add_node(df_pos.columns[i])

辺の設定&エッジの重みのリスト化
  num_pre = 0
  edge_weights = []
  size = 0.1
  for i in range(len(df_pos.columns)):
      for j in range(len(df_pos.columns)):
          if not (i==j):
            辺の追加
              G.add_edge(df_pos.columns[i],df_pos.columns[j])
            エッジの重みの追加
              if num_pre<len(G.edges):
                  num_pre = len(G.edges)
                  weight = 0
                  if (df_pos.columns[i] in df_tr.columns)and(df_pos.columns[j] in df_tr.index):
                      if df_tr[df_pos.columns[i]][df_pos.columns[j]]:
                          weight = df_tr[df_pos.columns[i]][df_pos.columns[j]]*size
                  elif(df_pos.columns[j] in df_tr.columns)and(df_pos.columns[i] in df_tr.index):
                      if df_tr[df_pos.columns[j]][df_pos.columns[i]]:
                          weight = df_tr[df_pos.columns[j]][df_pos.columns[i]]*size
                  edge_weights.append(weight)

座標の設定
  pos = {}
  for i in range(len(df_pos.columns)):
      node = df_pos.columns[i]
      pos[node] = (df_pos[node][0],df_pos[node][1])

描画
  nx.draw(G, pos, with_labels=True,font_size=16, node_size = 1000, node_color='k', font_color='w', width=edge_weights)

表示
  plt.show()



次に制約確認
データ読み込み
  df_demand = pd.read_csv('demand.csv')
  df_supply = pd.read_csv('supply.csv')

制約条件計算関数
需要側
  def condition_demand(df_tr,df_demand):
      flag = np.zeros(len(df_demand.columns))
      for i in range(len(df_demand.columns)):
          temp_sum = sum(df_tr[df_demand.columns[i]])
          if (temp_sum>=df_demand.iloc[0][i]):
              flag[i] = 1
      return flag

供給側
  def condition_supply(df_tr,df_supply):
      flag = np.zeros(len(df_supply.columns))
      for i in range(len(df_supply.columns)):
          temp_sum = sum(df_tr.loc[df_supply.columns[i]])
          if temp_sum<=df_supply.iloc[0][i]:
              flag[i] = 1
      return flag

  print("需要条件計算結果:"+str(condition_demand(df_tr_sol,df_demand)))
  print("供給条件計算結果:"+str(condition_supply(df_tr_sol,df_supply)))




これで輸送最適化は終わり
次に生産計画に取り掛かる

まずは利益を計算する関数から
利益計算関数
  def product_plan(df_profit,df_plan):
      profit = 0
      for i in range(len(df_profit.index)):
          for j in range(len(df_plan.columns)):
              profit += df_profit.iloc[i][j]*df_plan.iloc[i][j]
      return profit

  print("総利益:"+str(product_plan(df_profit,df_plan)))


